# -*- makefile -*-

# 比如在threads/build中，SRCDIR就是src/
SRCDIR = ../..

all: kernel.bin loader.bin

include ../../Make.config
# threads/Make.vars
# kernel.bin: DEFINES =
# KERNEL_SUBDIRS = threads devices lib lib/kernel $(TEST_SUBDIRS)
# TEST_SUBDIRS = tests/threads
# GRADING_FILE = $(SRCDIR)/tests/threads/Grading
# SIMULATOR = --bochs
include ../Make.vars
include ../../tests/Make.tests

# Compiler and assembler options.
kernel.bin: CPPFLAGS += -I$(SRCDIR)/lib/kernel

# Core kernel.
threads_SRC  = threads/start.S		# Startup code.
threads_SRC += threads/init.c		# Main program.
threads_SRC += threads/thread.c		# Thread management core.
threads_SRC += threads/switch.S		# Thread switch routine.
threads_SRC += threads/interrupt.c	# Interrupt core.
threads_SRC += threads/intr-stubs.S	# Interrupt stubs.
threads_SRC += threads/synch.c		# Synchronization.
threads_SRC += threads/palloc.c		# Page allocator.
threads_SRC += threads/malloc.c		# Subpage allocator.

# Device driver code.
devices_SRC  = devices/pit.c		# Programmable interrupt timer chip.
devices_SRC += devices/timer.c		# Periodic timer device.
devices_SRC += devices/kbd.c		# Keyboard device.
devices_SRC += devices/vga.c		# Video device.
devices_SRC += devices/serial.c		# Serial port device.
devices_SRC += devices/block.c		# Block device abstraction layer.
devices_SRC += devices/partition.c	# Partition block device.
devices_SRC += devices/ide.c		# IDE disk block device.
devices_SRC += devices/input.c		# Serial and keyboard input.
devices_SRC += devices/intq.c		# Interrupt queue.
devices_SRC += devices/rtc.c		# Real-time clock.
devices_SRC += devices/shutdown.c	# Reboot and power off.
devices_SRC += devices/speaker.c	# PC speaker.

# Library code shared between kernel and user programs.
lib_SRC  = lib/debug.c			# Debug helpers.
lib_SRC += lib/random.c			# Pseudo-random numbers.
lib_SRC += lib/stdio.c			# I/O library.
lib_SRC += lib/stdlib.c			# Utility functions.
lib_SRC += lib/string.c			# String functions.
lib_SRC += lib/arithmetic.c		# 64-bit arithmetic for GCC.
lib_SRC += lib/ustar.c			# Unix standard tar format utilities.

# Kernel-specific library code.
lib/kernel_SRC  = lib/kernel/debug.c	# Debug helpers.
lib/kernel_SRC += lib/kernel/list.c	# Doubly-linked lists.
lib/kernel_SRC += lib/kernel/bitmap.c	# Bitmaps.
lib/kernel_SRC += lib/kernel/hash.c	# Hash tables.
lib/kernel_SRC += lib/kernel/console.c	# printf(), putchar().

# User process code.
userprog_SRC  = userprog/process.c	# Process loading.
userprog_SRC += userprog/pagedir.c	# Page directories.
userprog_SRC += userprog/exception.c	# User exception handler.
userprog_SRC += userprog/syscall.c	# System call handler.
userprog_SRC += userprog/gdt.c		# GDT initialization.
userprog_SRC += userprog/tss.c		# TSS management.

# No virtual memory code yet.
vm_SRC = vm/vm.c          # Main api proxy
vm_SRC += vm/uninit.c     # Uninitialized page
vm_SRC += vm/anon.c       # Anonymous page
vm_SRC += vm/file.c       # File mapped page
vm_SRC += vm/inspect.c    # Testing utility

# Filesystem code.
filesys_SRC  = filesys/filesys.c	# Filesystem core.
filesys_SRC += filesys/free-map.c	# Free sector bitmap.
filesys_SRC += filesys/file.c		# Files.
filesys_SRC += filesys/directory.c	# Directories.
filesys_SRC += filesys/inode.c		# File headers.
filesys_SRC += filesys/fsutil.c		# Utilities.

# 遍历在变量KERNEL_SUBDIRS中指定的目录列表。
# 对于每个目录，它将另一个变量的值（通过连接目录名称和_SRC得到，
# 就是threads_SRC，devices_SRC，userprog_SRC这些）追加到SOURCES列表中。
SOURCES = $(foreach dir,$(KERNEL_SUBDIRS),$($(dir)_SRC))
# 将所有 .S, .c 对应为 .o
OBJECTS = $(patsubst %.c,%.o,$(patsubst %.S,%.o,$(SOURCES)))
DEPENDS = $(patsubst %.o,%.d,$(OBJECTS))

GDBPORT := $(shell expr `id -u` % 5000 + 25000)
IMAGE = kernel.img
QEMUOPTS = -serial mon:stdio -gdb tcp::$(GDBPORT)
QEMUOPTS += $(shell if $(QEMU) -nographic -help | grep -q '^-D '; then echo '-D qemu.log'; fi)

print-sources:
	echo $(SOURCES)

# -msoft-float: 指定编译器生成不使用硬件浮点运算指令的代码。相反，它会生成使用软件来模拟浮点运算的代码。
# 这在某些特定的情况下是非常有用的，尤其是对于没有硬件浮点单元（FPU）的处理器。
# CFLAGS = -m32 -g -msoft-float -O0

# -nostdinc: 指示编译器在查找头文件时不使用标准系统头文件目录
# CPPFLAGS = -nostdinc -I$(SRCDIR) -I$(SRCDIR)/lib

# -Wa: 将后面的选项传递给汇编器
# --gstabs: 告诉汇编器生成 STABS 格式的调试信息。STABS 是一种调试信息格式，常用于调试器（如 GDB）来帮助开发者调试代码。
# ASFLAGS = -Wa,--gstabs,--32

%.o: %.c
	printf "%s\n" "$<"
	$(CC) -c $< -o $@ $(CFLAGS) $(CPPFLAGS) $(WARNINGS) $(DEFINES) $(DEPS)

%.o: %.S
	$(CC) -c $< -o $@ $(ASFLAGS) $(CPPFLAGS) $(DEFINES) $(DEPS)

threads/kernel.lds.s: CPPFLAGS += -P
threads/kernel.lds.s: threads/kernel.lds.S threads/loader.h

kernel.o: threads/kernel.lds.s $(OBJECTS)
    # LDOPTIONS will be applied directly with 'ld' while LDFLAGS will be applied with 'gcc'.
    # LDOPTIONS = -melf_i386
    # -T FILE, --script FILE      Read linker script
	$(LD) $(LDOPTIONS) -T $< -o $@ $(OBJECTS)
	# -S, --source             Intermix source code with disassembly
	$(OBJDUMP) -S $@ > kernel.asm
	# -n, --numeric-sort     Sort symbols numerically by address
	$(NM) -n $@ > kernel.sym

kernel.bin: kernel.o
    # -R --remove-section <name>       Remove section <name> from the output
	$(OBJCOPY) -R .note -R .comment -S $< $@

threads/loader.o: threads/loader.S
	$(CC) -c $< -o $@ $(ASFLAGS) $(CPPFLAGS) $(DEFINES)

loader.bin: threads/loader.o
    # 使程序的段不进行页面对齐。这意味着所有段都按原样链接，没有额外的填充或对齐。对于小型引导加载程序或内核镜像，这个选项通常用来减少文件大小和内存占用。
    # -e 指定程序的入口点地址为0。入口点是程序开始执行的地方。在实际引导加载程序中，这个地址通常是0x7c00，但这里指定为0，可能是因为实际的入口点会在引导加载程序代码中被重定位或通过其他方式处理。
    # -Ttext 0x7c00 指定.text段的装载地址为0x7c00（看loader.asm中地址）。
    # 在x86体系结构的启动过程中，BIOS通常将主引导记录（MBR）加载到内存的0x7c00地址处，所以引导加载程序也需要在这个地址开始执行。
	$(LD) $(LDOPTIONS) -N -e 0 -Ttext 0x7c00 -o loader.out $<
	$(OBJDUMP) -S loader.out > loader.asm
	# -j .text: 这个选项指定只复制 .text 段（section）。-j 是 --only-section 的缩写形式。
	# loader.out 是输入文件, loader.bin 是输出文件
	$(OBJCOPY) -S -O binary -j .text loader.out $@
	rm loader.out

os.dsk: kernel.bin
	cat $^ > $@

kernel.img: kernel.bin loader.bin
	rm -f $@
	$(PINTOS) --make-disk=$@ --kernel=kernel.bin --loader=loader.bin

qemu: $(IMAGE)
	$(QEMU) -drive file=$(IMAGE),index=0,media=disk,format=raw $(QEMUOPTS)

qemu-nox: $(IMAGE)
	@echo "***"
	@echo "*** Use Ctrl-a x to exit qemu. If you are under GNU Screen or Tmux and "
	@echo "*** its prefix key is Ctrl-a, press Ctrl-a twice and x to exit."
	@echo "***"
	$(QEMU) -nographic -drive file=$(IMAGE),index=0,media=disk,format=raw $(QEMUOPTS)

clean::
	rm -f $(OBJECTS) $(DEPENDS) 
	rm -f threads/loader.o threads/kernel.lds.s threads/loader.d
	rm -f kernel.bin.tmp
	rm -f kernel.o kernel.lds.s
	rm -f kernel.bin loader.bin
	rm -f loader.asm kernel.asm kernel.sym
	rm -f bochsout.txt bochsrc.txt
	rm -f results grade

Makefile: $(SRCDIR)/Makefile.build
	cp $< $@

-include $(DEPENDS)

.PHONY: all clean qemu image
